# 函数实战
# 函数 -- 将一段具有功能性的代码进行封装
# 如果想要执行当前代码的功能，直接调用函数即可
# 提高代码重用性

# 分类
# 内置函数 自定义函数

# 调用函数  函数名(参数)  --参数可有可无 根据程序需求进行传参

# 全局变量
# 在函数外和函数内都能使用的变量
# a = 10
# def func_global():
    

# 局部变量
# 定义在函数内，只能在函数内使用的变量
# a = 10
# def func_local():
#     b = 20
#     print(b)
# func_local()
# def func1():
#     print(b)
# func1() --> 报错

# 全局变量与局部变量重名
a = 10
def func_repeat():
    a = 20
    print(a) # --> 20
func_repeat()
print(a) #输出 --> 10

# 修改全局变量 global 要修改的全局变量变量名 ；换行对变量重新赋值
a1 = 10
def func_global():
    global a1 # 修改全局变量
    a1 = 20 # 换行重新赋值
    print(a1)
func_global() # --> 20

print(a1) # --> 20



# 拆包与交换变量的值
# 拆包 -- 数据使用多个变量接收
# 可拆包数据类型: 字符串、列表、元组、字典(取出来为key)
# 要拆的数据个数与变量个数要一致，否则报错
str1, str2, str3 = 'a','b','c'
print(str1, str2, str3)

list1, list2, list3 = [1,2,3]
print(list1, list2, list3)

tuple1, tuple2, tuple3 = (1, 2, 3)
print(tuple1, tuple2, tuple3)

dict1, dict2 = {'name':'张三', 'age':18}
print(dict1, dict2)

# 1.循环遍历字典键值对
dict_range = {'name':'张三','age':18}
for i, j in dict_range.items():
    # 如果用一个临时变量接收，结果为元组 i = (键，值)
    # 如果用两个临时变量接收 i, j = (键，值) i接收所有键, j接收所有值
    print(i)
    
# 2.函数返回多个值
def func(a):
    return a**2, a**3
ret1,ret2 = func(10)
print(ret1, ret2)


# 交换变量的值
# a = 1
# b = 2

# c = a
# a = b
# b = c
# print(a, b)

# 一次性定义多个变量
# a, b = 1, 2
# a, b = b, a
# print(a,b)
# 应用 -- 输出斐波那契数列
# a, b = b, a + b
