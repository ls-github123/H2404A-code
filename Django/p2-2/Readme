p2重修，对项目文件进行了重新整理

知识点笔记:

day01
1. 请简述Django框架的主要特点，并举例说明如何体现这些特点在实际项目开发中的优势
  ○ MTV架构清晰分离关注点，使得开发更高效有序
  ○ 内置强大的ORM（Object-Relational Mapping），简化数据库操作和数据模型的管理
  ○ 自带丰富的功能模块，如认证、授权、会话管理、静态文件处理等，大大减少重复工作
  ○ 提供了便捷的URL路由系统和模版引擎，使视图和前端界面的开发更加灵活简洁
  ○ 支持国际化和本地化，利于构建多语言网站

2. 请描述在Django中创建一个子应用的过程，并说明如何在项目中注册和使用这个子应用
  a. 在项目的根目录下运行命令 django-admin startapp 应用名 
  b. 在项目的setting.py中的INSTALLED_APPS注册应用
  c. 在子应用的目录中models.py定义数据模型，views.py处理视图逻辑，urls.py定义子应用的URL路由等

3、请解释Django框架中的HttpRequest对象和HttpResponse对象的作用，并举例说明它们在视图函数中的使用
    (1) 在Django中，HttpRequest对象封装了客户端发送的所有HTTP请求信息，包括请求方法（GET、POST等）、请求头、请求体、查询参数、POST数据等。
    (2) 视图函数的第一个参数通常接收HttpRequest对象，用于获取和处理请求数据。
    (3) HttpResponse对象则是视图函数返回的结果，它封装了服务器将要发送给客户端的HTTP响应内容，包括状态码、响应头和响应体。
    (4) 视图函数通过构造HttpResponse对象并返回，以完成对请求的响应。


day02
1、简述Django模板的作用是什么
    Django模板是Django Web框架中用于动态生成HTML页面的工具。它允许开发者将Python代码与HTML标记结合，通过模板变量和模板标签来动态地展示数据。
    这样，开发者可以定义HTML页面的结构，并在运行时通过传递数据来填充页面的内容

2、在Django中，如何配置静态文件的路径？请简要说明
    在Django中，配置静态文件的路径通常需要在项目的`settings.py`文件中进行。需要定义`STATIC_URL`，它指定了静态文件在Web服务器上的访问路径

3、Django ORM是什么？它有什么优点？
    Django ORM（对象关系映射）是Django框架提供的一种数据库访问技术。
    它允许开发者使用Python对象来操作数据库，而不必直接编写SQL查询。ORM将数据库表映射到Python类，将表的行映射到类的实例，将表的列映射到类的属性。
    这样，开发者可以使用Python语法来执行数据库的增删改查操作，提高了开发效率和代码的可读性。
    Django ORM的优点包括简化数据库操作、提供数据库独立性（可以在不更改代码的情况下切换不同的后端数据库）以及易于学习和使用


day03
1、简述Django ORM的概念
    Django ORM（对象关系映射）是Django框架提供的一种机制，它允许开发者使用Python类来表示数据库中的表，并使用Python对象来操作数据库记录。
    通过这种方式，开发者可以专注于业务逻辑的实现，而无需编写复杂的SQL语句。

2、简述Django ORM中如何进行数据的增删改查操作
    在Django ORM中，可以通过以下方式进行数据的增删改查操作：

·    增：使用模型类的`objects.create()`方法创建新的模型实例并保存到数据库。

·    删：使用模型实例的`delete()`方法删除该实例，或使用`objects.filter().delete()`方法删除满足条件的多个实例。

·    改：首先通过`objects.get()`或`objects.filter()`获取模型实例，然后修改其属性，最后调用`save()`方法将修改保存到数据库。

·    查：使用`objects.all()`获取模型所有实例，或使用`objects.filter()`根据条件筛选实例，也可以使用`objects.get()`根据主键或唯一字段获取单个实例。

3、在Django ORM查询中，filter()和exclude()方法有何区别
    在Django ORM查询中，`filter()`和`exclude()`方法的区别如下：

    ·filter()`方法用于根据指定的条件筛选模型实例，返回满足条件的实例列表。

    ·exclude()`方法则用于排除满足指定条件的模型实例，返回不满足条件的实例列表。

    简单来说，`filter()`方法是“包含”的逻辑，而`exclude()`方法是“排除”的逻辑。这两个方法通常用于构建复杂的查询条件，以获取所需的数据集。


day04
1、在Django ORM中，什么是一对一关系，并如何定义它
    一对一关系是指两个模型之间的关联关系，其中一个模型的一个实例只能与另一个模型的一个实例相关联。
    在Django ORM中，一对一关系通过`OneToOneField`字段来定义。
    例如，假设有一个`UserProfile`模型用于存储用户的额外信息，它与`User`模型之间存在一对一关系，可以这样定义：
    user = models.OneToOneField(User, on_delete=models.CASCADE)

2、Django ORM中的多对多关系是如何实现的，有哪些注意事项
    Django ORM中的多对多关系是通过`ManyToManyField`字段来实现的。
    Django会自动为这种关系创建一个中间表来存储两个模型实例之间的关联关系。使用多对多关系时，需要注意以下几点：
    ·通过`related_name`参数可以为反向关系指定一个名称。
    当删除一个对象时，如果有关联的多对多关系，需要谨慎处理`on_delete`参数，以避免数据不一致

3、在Django ORM中，ForeignKey的on_delete参数有哪些选项，它们分别代表什么意义
    `ForeignKey`的`on_delete`参数用于指定当关联的外键对象被删除时，应该如何处理当前对象。常见的选项包括：
    ·`CASCADE`：级联删除，当关联对象被删除时，当前对象也会被删除。
    ·`PROTECT`：保护模式，当关联对象被删除时，会抛出异常阻止删除操作。
    ·`SET_NULL`：设置NULL，当关联对象被删除时，将当前对象的外键字段设置为NULL（前提是外键字段允许NULL值）。
    ·`SET_DEFAULT`：设置默认值，当关联对象被删除时，将当前对象的外键字段设置为默认值。
    ·`DO_NOTHING`：不采取任何操作，这通常用于自定义的删除逻辑。


day05
1、在Django中，前端通过GET请求传递参数主要有哪几种方式？并简要说明它们的使用场景
    在Django中，前端通过GET请求传递参数主要有两种方式：
    （1）通过URL的查询字符串传递参数。
        这种方式适用于在URL中直接附带少量参数的情况，例如分页查询、简单的搜索条件等。
        在前端构造URL时，将参数以“key=value”的形式拼接在URL的末尾，并使用“&”符号分隔多个参数。后端在Django视图中可以通过`request.GET`获取这些参数。
    （2）通过URL路径传递参数。
        这种方式适用于将参数作为URL路径的一部分进行传递，例如根据文章ID获取文章详情。
        在定义URL模式时，可以使用正则表达式捕获路径中的参数，并在视图中通过位置参数或关键字参数接收这些参数。

2、在Django中，常见的HTTP请求方式有哪些？请简要说明它们各自的主要用途
    在Django中，常见的HTTP请求方式包括GET、POST、PUT、DELETE等。
    ·GET请求主要用于从服务器获取数据，通常用于查询和检索资源。
    ·POST请求用于向服务器提交数据，常用于创建新的资源或提交表单数据。
    ·PUT请求用于更新服务器上的资源，通过提供完整的资源数据来替换现有资源。
​	·DELETE请求用于删除服务器上的资源

3、在Django中，如何处理POST请求中的表单数据
    在Django中，处理POST请求中的表单数据可以通过`request.POST`来实现。
    `request.POST`是一个类似于字典的对象，其中包含了前端表单提交的数据。
    可以使用`request.POST.get('field_name')`来获取指定字段的值。
    如果需要处理文件上传，可以通过`request.FILES`来获取上传的文件对象。


day06
1、描述一下django中的静态路由
    Django中的静态路由用于匹配固定的URL模式。
    它使用`path()`函数来定义URL模式与视图函数之间的映射关系。
    当请求到达时，Django会根据定义的静态路由来匹配请求的URL，并调用相应的视图函数处理请求

2、描述一下django中的动态路由
    Django中的动态路由允许URL中包含变量部分，这些变量可以在视图函数中捕获并使用。
    动态路由使用``的语法来定义变量部分，其中`converter`指定了变量的类型（如`int`、`str`等），`name`是变量的名称。
    当请求的URL匹配到动态路由时，Django会将URL中的变量部分提取出来，并传递给视图函数。
    这样，视图函数可以根据这些变量来生成不同的响应

3、说一下路由分发
    在Django中，路由分发是通过`include()`函数实现的。
    当应用变得复杂，拥有多个视图和URL模式时，可以将它们组织到不同的应用（app）中，并在项目的`urls.py`文件中使用`include()`函数将这些应用的URL配置包含进来。
    这样，Django会根据请求的URL，在包含的应用中查找匹配的路由，并调用相应的视图函数

4、说一下cookie的作用
    Django中的cookie用于在客户端（浏览器）存储少量的数据。当服务器向客户端发送响应时，可以在响应头中包含cookie信息。
    客户端在后续的请求中会将cookie信息发送回服务器。
    这样，服务器可以利用cookie来跟踪用户的会话状态、保存用户的偏好设置等信息，从而实现个性化的用户体验。

5、说一下session的作用
    Django中的session用于在服务器端存储用户的会话信息。它允许跨多个请求跟踪用户的身份和状态。
    Django提供了多种session存储方式，包括数据库、缓存和文件等。
    
    默认情况下，Django使用数据库作为session的存储后端，但也可以根据需要配置为使用其他存储方式，
    在会话期间，服务器会为用户分配一个唯一的session ID，并将其作为cookie发送给客户端，
    客户端在后续的请求中会携带这个session ID，服务器则根据这个ID从存储中检索用户的会话信息


day07
1、javascript的数据类型
    String 字符串 Number 数字 Boolean 布尔 Null 空 Undefined 未定义 Object 对象

2、javascript中null和undefined的区别
    Null 空对象 或者空对象的引用
    Undefined 未定义  变量被声明了没有赋值

3、javascript中===和==的区别
    === 是比较的两方值和类型都相等才会返回true
    ==是在值相等就返回true

4、请解释JavaScript中的for循环和while循环的区别
    `for`循环和`while`循环都是用于重复执行代码块的循环结构。
    `for`循环通常在知道循环次数时使用，它有三个部分：初始化、条件和增量。
    而`while`循环在不知道循环次数，但有一个明确的条件需要满足时使用，只要条件为真，就会重复执行代码块
        ---
        //语法  用for循环输出1到10
        /*for(let i =1;i<=10;i++){
            console.log(i)
        }*/
        //先定义一个初始值
        let i=1;
        while(i<=10){
            console.log(i);
            i++
        }
        let arr=[1,2,3,4]
        let j=0;
        while(j<arr.length){
            console.log(arr[j])
            j=j+1
        }
        ```

5、如何在html中动态的插入元素
    在HTML中动态地插入通过AJAX请求获取的数据，通常可以通过修改DOM元素的内容来实现。
    使用JavaScript的innerHTML属性来设置元素的内部HTML内容。在AJAX请求的回调函数中，将获取到的数据赋值给相应的DOM元素，即可实现数据的动态插入


day08
1、在前后端分离的架构中，前端和后端各自承担哪些职责
    在前后端分离的架构中，前端主要负责页面的展示、用户交互以及数据的可视化展示。它通过AJAX请求从后端获取数据，并在页面中动态更新内容。
    后端则负责提供API接口，处理前端发送的请求，进行数据的增删改查操作，并返回相应的结果给前端。前端和后端通过API进行通信，实现数据的交互和共享。

2、Django作为后端框架，在前后端分离架构中扮演着什么角色
    在前后端分离的架构中，Django作为后端框架，主要扮演着提供API接口的角色。它负责处理前端发送的HTTP请求，执行相应的业务逻辑，并返回JSON格式的数据给前端。
    Django通过其强大的ORM系统、模板引擎和中间件等功能，简化了后端开发的复杂度，提高了开发效率。
    同时，Django还提供了丰富的扩展性和灵活性，使得开发者能够轻松构建出高效、稳定、安全的后端服务。

3、在使用Django进行Web开发时，为什么推荐使用RESTful API
    推荐使用RESTful API是因为它提供了一种标准化的方式来构建Web服务，使得前后端之间的通信更加清晰、一致和可预测。
    RESTful API基于HTTP协议和URL设计，通过不同的请求方法和路径来操作资源，使得接口易于理解和使用。
    此外，RESTful API还支持跨平台、跨语言的数据交互，提高了系统的可扩展性和可维护性


day09
1、在简述DRF是什么，以及它的主要用途是什么
    DRF（Django REST framework）是一个用于构建Web API的强大而灵活的工具包。
    它的主要用途是帮助开发者快速、高效地构建符合RESTful规范的Web API，从而实现前后端数据的交互

2、DRF是如何处理HTTP请求的
    DRF通过定义视图类来处理HTTP请求。视图类继承自DRF提供的基类（如APIView），并实现了处理不同HTTP方法（如GET、POST、PUT、DELETE等）的逻辑。
    当客户端发送请求到API时，DRF会根据请求的URL和HTTP方法找到对应的视图类和方法，并执行相应的处理逻辑，最终返回响应给客户端

3、什么是APIView，它在DRF中扮演了什么角色
    APIView是DRF中用于处理HTTP请求并返回响应的类。
    它作为视图层的基本组件，提供了基于类的视图方式来编写RESTful API。
    通过APIView，开发者可以方便地定义API的行为和逻辑，处理各种HTTP请求，并返回相应的响应

4、APIView如何与Django的URL配置结合使用
    在Django中，URL配置是通过urls.py文件来实现的。
    对于使用DRF的APIView，开发者需要在urls.py文件中定义相应的URL模式，并将它们映射到APIView的视图函数或视图类。
    这样，当客户端发送请求到这些URL时，Django会根据URL配置找到对应的APIView，并执行相应的处理逻辑。
