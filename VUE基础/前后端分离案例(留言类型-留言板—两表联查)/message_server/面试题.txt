1、Django ORM是什么？它有什么优点
Django ORM（对象关系映射）是Django框架提供的一种数据库访问技术。它允许开发者使用Python对象来操作数据库，而不必直接编写SQL查询。ORM将数据库表映射到Python类，将表的行映射到类的实例，将表的列映射到类的属性。这样，开发者可以使用Python语法来执行数据库的增删改查操作，提高了开发效率和代码的可读性。Django ORM的优点包括简化数据库操作、提供数据库独立性（可以在不更改代码的情况下切换不同的后端数据库）以及易于学习和使用

2、简述Django ORM中如何进行数据的增删改查操作
在Django ORM中，可以通过以下方式进行数据的增删改查操作：
·    **增**：使用模型类的`objects.create()`方法创建新的模型实例并保存到数据库。
·    **删**：使用模型实例的`delete()`方法删除该实例，或使用`objects.filter().delete()`方法删除满足条件的多个实例。
·    **改**：首先通过`objects.get()`或`objects.filter()`获取模型实例，然后修改其属性，最后调用`save()`方法将修改保存到数据库。
·    **查**：使用`objects.all()`获取模型所有实例，或使用`objects.filter()`根据条件筛选实例，也可以使用`objects.get()`根据主键或唯一字段获取单个实例

3、在Django ORM查询中，filter()和exclude()方法有何区别
在Django ORM查询中，`filter()`和`exclude()`方法的区别如下：
·    `filter()`方法用于根据指定的条件筛选模型实例，返回满足条件的实例列表。
·    `exclude()`方法则用于排除满足指定条件的模型实例，返回不满足条件的实例列表。
简单来说，`filter()`方法是“包含”的逻辑，而`exclude()`方法是“排除”的逻辑。这两个方法通常用于构建复杂的查询条件，以获取所需的数据集

4、在Django ORM中，ForeignKey的on_delete参数有哪些选项，它们分别代表什么意义
`ForeignKey`的`on_delete`参数用于指定当关联的外键对象被删除时，应该如何处理当前对象。常见的选项包括：

    `CASCADE`：级联删除，当关联对象被删除时，当前对象也会被删除。
   `PROTECT`：保护模式，当关联对象被删除时，会抛出异常阻止删除操作。
    `SET_NULL`：设置NULL，当关联对象被删除时，将当前对象的外键字段设置为NULL（前提是外键字段允许NULL值）。
    `SET_DEFAULT`：设置默认值，当关联对象被删除时，将当前对象的外键字段设置为默认值。
   `DO_NOTHING`：不采取任何操作，这通常用于自定义的删除逻辑。

5、在前后端分离的架构中，前端和后端各自承担哪些职责
在前后端分离的架构中，前端主要负责页面的展示、用户交互以及数据的可视化展示。它通过AJAX请求从后端获取数据，并在页面中动态更新内容。后端则负责提供API接口，处理前端发送的请求，进行数据的增删改查操作，并返回相应的结果给前端。前端和后端通过API进行通信，实现数据的交互和共享

6、在使用Django进行Web开发时，为什么推荐使用RESTful API
推荐使用RESTful API是因为它提供了一种标准化的方式来构建Web服务，使得前后端之间的通信更加清晰、一致和可预测。RESTful API基于HTTP协议和URL设计，通过不同的请求方法和路径来操作资源，使得接口易于理解和使用。此外，RESTful API还支持跨平台、跨语言的数据交互，提高了系统的可扩展性和可维护性

7、简述DRF是什么，以及它的主要用途是什么
DRF（Django REST framework）是一个用于构建Web API的强大而灵活的工具包。它的主要用途是帮助开发者快速、高效地构建符合RESTful规范的Web API，从而实现前后端数据的交互

8、DRF是如何处理HTTP请求的
DRF通过定义视图类来处理HTTP请求。视图类继承自DRF提供的基类（如APIView），并实现了处理不同HTTP方法（如GET、POST、PUT、DELETE等）的逻辑。当客户端发送请求到API时，DRF会根据请求的URL和HTTP方法找到对应的视图类和方法，并执行相应的处理逻辑，最终返回响应给客户端

9、普通序列化器和模型序列化器在Django REST framework中有何区别
普通序列化器（`serializers.Serializer`）是Django REST framework中最基本的序列化器类型，它可以序列化任意Python数据类型。而模型序列化器（`serializers.ModelSerializer`）则是针对Django模型设计的，它可以根据模型的字段自动创建相应的序列化字段，使得序列化模型实例变得更加简单和快捷

10、如何在序列化器中添加自定义的验证规则
在序列化器中，可以通过在字段上添加验证器（validators）来添加自定义的验证规则。验证器是一个可调用对象，它接收要验证的值并返回True或引发ValidationError。在字段定义中使用`validators`参数，可以将验证器与字段相关联。

11、在Django REST framework中，StringRelatedField的主要用途是什么
StringRelatedField在Django REST framework中主要用于在序列化器中表示与另一个模型关联对象的字符串表示形式。它通常用于替代默认的关联对象表示，以显示更友好的字符串。

12、请简述GenericAPIView在Django REST framework中的作用
GenericAPIView是Django REST framework中的一个通用视图基类，它提供了一系列与HTTP方法（如GET、POST、PUT等）相对应的处理程序。通过继承GenericAPIView，开发者可以轻松地创建具有通用功能的API视图，如列表、创建、检索、更新和删除操作

13、简述Django REST framework中ViewSet的作用
ViewSet是Django REST framework中的一个基类，用于构建API的视图集合。它提供了一种编写可重用视图逻辑的方式，通过定义不同的操作（如list、create、retrieve、update、destroy等）来处理对资源的请求。ViewSet可以与Router结合使用，自动生成URL路由

14、解释ModelViewSet与ViewSet的区别
ModelViewSet是ViewSet的一个子类，它提供了对Django模型的默认CRUD（创建、读取、更新、删除）操作的实现。通过使用ModelViewSet，你可以快速地为Django模型创建完整的API视图，而无需手动编写每个操作的逻辑。相比之下，ViewSet则更加灵活，允许你自定义每个操作的逻辑。

15、在DRF中，分页的主要作用是什么和实现方式
在DRF中，分页的主要作用是控制API返回的数据量，避免一次性返回过多数据导致性能问题或内存溢出。通过分页，可以将数据分割成多个页面，用户可以根据需要请求不同的页面。实现分页方式可以通过基于页码的分页（PageNumberPagination）

16、说一下vue常用的指令
v-on 事件绑定  v-bind 绑定属性  v-for 元素遍历 v-if 控制元素的创建与删除  v-show 元素显示与隐藏 v-model 表单元素双向绑定
17、说一下在使用v-for遍历元素时，为什么要有key属性
因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好地区别各个组件 key的作用主要是为了高效的更新虚拟DOM
18、说一下v-if和v-show的区别
v-if 根据条件创建或者删除元素
v-show 根据条件显示或者隐藏元素
19、收一下v-model的作用
v-model是Vue中用于创建双向数据绑定的指令。它主要用于表单元素（如<input>、<textarea>和<select>）上，使得表单元素的值和Vue实例的数据保持同步。当表单元素的值改变时，Vue实例的数据也会更新；同样，当Vue实例的数据改变时，表单元素的值也会自动更新。
v-model实际上是v-bind和v-on的语法糖。它根据表单元素的类型自动设置监听的事件和绑定的属性。例如，对于文本输入框，v-model会监听input事件并绑定value属性

20、说一下axios的请求拦截和响应拦截
请求拦截器：在请求发送前进行一些操作，例如在每个请求体里面加上用户信息,统一做了处理的，如果要更改也是非常的容易。

响应拦截器：在接收到响应后再进行一些操作，例如在服务器返回登录状态失效的时候，需要重登录，跳转到登录页面，响应拦截器，就是是在请求结果的返回后的同时，先不直接导出，而是先对响应码等等的进行处理，处理好之后再导出给页面，如果将这个对象响应码的处理过程抽出来，就成了所谓的响应拦截器
