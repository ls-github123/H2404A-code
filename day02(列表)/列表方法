# 第一种方法: 直接定义
list1 = [10, 20, 2.3, 'hello']
print(list1)
print(type(list1))


# 第二种方法: 构造法
list2 = list('hello')
print(list2)
print(type(list2))

# 第三种方法: 列表推导式 --> 本质通过for循环往列表中增加数据
list3 = [i for i in range(1,51) if i % 2 == 0]
print(list3)
print(type(list3))

list_num = [i for i in range(100,1000) if int(str(i)[0]) ** 3 + int(str(i)[1]) ** 3 + int(str(i)[2]) ** 3 == i]
print(f'利用列表推导式写入的100-999区间的水仙花数为:{list_num}')


# 列表的索引与切片
# 索引
list_indeks = ['张重量', '黄子', '杜佳琪', '王馨瑶', '范思悦', '周佳琪', '刘思颖', '刘佳丽']
print(list_indeks[2])
print(list_indeks[-2])

# 切片
print(list_indeks[1:4])
print(list_indeks[-5:-2])
print(list_indeks[1:-1])
print(list_indeks[-4:-1])
print(list_indeks[::2])
print(list_indeks[::-2])
print(list_indeks[-2:-5:-1])
print(list_indeks[0:3])
print(list_indeks[2:50])
print(list_indeks[::-1])

# 列表的循环遍历
 # for 循环
for girl in list_indeks:
    print(girl)

# while循环 --初始值、循环条件、步长
# 下标范围: 0 ~ len()-1
print(len(list_indeks)) # 统计列表长度，同时统计列表中元素的个数

# while num <= len(list_indeks)-1:
#     print(list5[num])
#     num += 1


#列表增加数据方法
# append() -- 将输入就作为一个整体添加到列表尾部
list_indeks.append('高媛子')
print(list_indeks)

# insert()
  # list.insert() -- 将数据添加到列表中指定下标位置前
list_indeks.insert(3, '史心悦')
print(list_indeks)

# extend()
# list.extend(可迭代对象) -- 将可迭代对象中的数据进行拆分，依次添加到列表尾部
list3.extend(list_indeks)
print(list3)


# 列表数据的删除
list_del = ['CPU', 'RAM', 'ROM' ,'NVME', 'SSD' ,'TPM', 'Bitlocker', 'GPU']

# remove()  list.remove(数据)  --从列表中删除指定数据，如数据不存在则报错
list_del.remove('Bitlocker')
print(list_del)

# pop() list.pop(下标) -- 删除列表中指定指定下标的对应的数据，不指定下标则默认删除列表尾部元素
# 如果下标不存在则报错
list_del.pop(1)
print(list_del)


# clear()  list.clear() --清空指定列表中的数据，列表本身依然存在
# list_del.clear()
# print(list_del)


# del() -- del(列表)  del 列表   del 列表[下标]  -- 删除列表，删除后列表不存在  删除列表中指定下标对应的数据，如下标不存在则报错

# 列表数据修改  -- list[索引] = '新值'
list_data = ['CPU', 'RAM', 'ROM' ,'NVME', 'SSD' ,'TPM', 'Bitlocker', 'GPU']
list_data[4] = 'HSD'
print(list_data)

# 列表数据查询
# index() -- list.index(数据, start, end)  查询数据在范围中第一次出现的位置在整个列表中的下标
# 不指定范围则默认从整个列表中查询
print(list_data.index('TPM'))

# count()  --  list.count(数据)  统计数据在整个列表中出现的次数，如果数据不存在，则次数为 0
print(list_data.count('CPU'))
